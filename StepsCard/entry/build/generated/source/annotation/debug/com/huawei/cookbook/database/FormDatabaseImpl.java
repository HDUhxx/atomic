// Copyright (c) Huawei Technologies Co., Ltd. 2019-2019. All rights reserved.
package com.huawei.cookbook.database;

import java.io.File;
import java.util.Arrays;
import ohos.data.orm.DowngradeComparator;
import ohos.data.orm.OrmMigration;
import ohos.data.orm.UpgradeComparator;
import ohos.data.rdb.RdbOpenCallback;
import ohos.data.rdb.RdbStore;

/**
 * Generated by ohos.data.orm.processor for com.huawei.cookbook.database.FormDatabase. Do not modify!
 *
 * @author Huawei
 * @since 2022-08-08
 */
public class FormDatabaseImpl extends FormDatabase {
    private OrmMigration[] upgradeMigrations;

    private OrmMigration[] downgradeMigrations;

    public FormDatabaseImpl() {
        super();
        this.upgradeMigrations = null;
        this.downgradeMigrations = null;
    }

    public FormDatabaseImpl(OrmMigration[] upgradeMigrations, OrmMigration[] downgradeMigrations) {
        super();
        this.upgradeMigrations = upgradeMigrations;
        this.downgradeMigrations = downgradeMigrations;
    }

    @Override
    public int getVersion() {
        return 1;
    }

    @Override
    public RdbOpenCallback getHelper() {
        return new RdbOpenCallback() {
            @Override
            public void onUpgrade(RdbStore store, int oldVersion, int newVersion) {
                if (upgradeMigrations != null) {
                    Arrays.sort(upgradeMigrations, new UpgradeComparator());
                    for (OrmMigration migration : upgradeMigrations) {
                        if (migration.getBeginVersion() >= oldVersion && migration.getEndVersion() <= newVersion) {
                            migration.onMigrate(store);
                        }
                    }
                }
            }

            @Override
            public void onDowngrade(RdbStore store, int oldVersion, int newVersion) {
                if (downgradeMigrations != null) {
                    Arrays.sort(downgradeMigrations, new DowngradeComparator());
                    for (OrmMigration migration : downgradeMigrations) {
                        if (migration.getBeginVersion() <= oldVersion && migration.getEndVersion() >= newVersion) {
                            migration.onMigrate(store);
                        }
                    }
                }
            }

            @Override
            public void onCorruption(File databaseFile) {
                corruptionHandler(databaseFile);
            }

            @Override
            public void onCreate(RdbStore store) {
                store.executeSql("CREATE TABLE IF NOT EXISTS `form` (`formId` INTEGER PRIMARY KEY, `formName` TEXT , `dimension` INTEGER )");
                store.executeSql("CREATE TABLE IF NOT EXISTS `sensorData` (`date` TEXT PRIMARY KEY, `stepsValue` INTEGER , `realValue` INTEGER )");
            }
        };
    }
}
